{"name":"Polynomials","tagline":"inerpolation of functions mapping to a vector space","body":"This library should make it easy to construct and evaluate interpolation polynomials. for functions\r\n\r\n```{javascript}\r\nstate_type f( time_type t );\r\n```\r\n\r\n`time_type` is assumed to be one dimensional ( `double`, `float` ) and `state_type` can be any type supporting addition ad multiplication with `time_type` ( for example `double` or `boost::numeric::ublas::vector`).\r\n\r\nCurrently supported functions are\r\n\r\n| Feature               | syntax                                                  |\r\n|-----------------------|-------------------------------------------------------- | \r\n| construction          | `polynomial<> P( {t0,t1,t2,...,tp}, {y0,y1,y2,...,yp} )`|\r\n| evaluation            | `y =  P( time )`                                        |\r\n| differentiation       | `y =  P.deriv( time, order )`                           |\r\n| rootfinding           | `t =  P.findroot( rootfn, tlower, tupper )`             |\r\n| differentiation       | `polynomial<> deriv =  P[order]`                        |\r\n| hermite interpolation | `polynomial<> P( {t0,t0,t0,t1}, {y0,dy0,ddy0,y1} )`     |\r\n| integration           | `P.integrate( t0, t1 )`                                 |\r\n| addition/substraction | `polynomial<> sum = P1 + P2`                            |\r\n| adding points*        | `P.add_point( tnew, ynew )`                             |\r\n\r\n* * limited support for adding derivatives ( that is `tnew` already exists in `t_` )\r\n\r\n### plans\r\n\r\nthere are some missing features in the current implementation. Some major improvements developed right now are\r\n\r\n* automatic sorting of input, so that `t_[0] <= t_[1] <= ... <= t_[p]`\r\n  * this requires `add_point` to insert the new point at an appropriate spot\r\n    * tat in return requires to store all finite differences during construction\r\n* get an own class for polynomials in standard basis. This could be a derived class of polynomial supporting\r\n  integration \r\n* set the identical function as default for `rootfn` if `state_type == double`. this way, a root\r\n  of the polynomial is found which should be a common usecase.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}